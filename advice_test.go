package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"

	"github.com/DATA-DOG/godog"
)

const defaultContentType = "application/json"

type StepContext struct {
	adviceResponse AdviceResponse
	advice56       SpecificAdvice
	adviceMessage  AdviceMessage
	searchResult   SearchResult
	autogenerated  AutoGenerated
}

type AdviceResponse struct {
	Slip struct {
		Advice string `json:"advice"`
		SlipID string `json:"slip_id"`
	} `json:"slip"`
}

type SpecificAdvice struct {
	Slip SlipAD `json:"slip"`
}

type SlipAD struct {
	Advice string `json:"advice"`
}

type AdviceMessage struct {
	Message Message `json:"message"`
}
type Message struct {
	Type string `json:"type"`
	Text string `json:"text"`
}

type SearchResult struct {
	TotalResults string `json:"total_results"`
	Query        string `json:"query"`
	Slips        []Slip `json:"slips"`
}
type Slip struct {
	Advice string `json:"advice"`
	SlipID string `json:"slip_id"`
}

type AutoGenerated struct {
	TotalResults string `json:"total_results"`
	Query        string `json:"query"`
	Slips        []struct {
		Advice string `json:"advice"`
		SlipID string `json:"slip_id"`
	} `json:"slips"`
}

func (ctx *StepContext) iAdviceServiceRunning() error {
	//The service could have a status API
	return nil
}

//Scenario: verify a random advice is returned
func (ctx *StepContext) iRequestRandomAdvice() error {
	url := "https://api.adviceslip.com/advice"

	resp, err := http.Get(url)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error response. %s\n", err)
	}
	if resp.StatusCode != 200 {
		fmt.Println("Status Code. %s\n", resp.StatusCode)
	}

	data, _ := ioutil.ReadAll(resp.Body)
	json.Unmarshal(data, &ctx.adviceResponse)

	return nil
}

func (ctx *StepContext) iRandomAdviceReturned() error {
	fmt.Println("Random Advice: ", ctx.adviceResponse.Slip.Advice)
	return nil
}

//Scenario: verify an advice is returned
func (ctx *StepContext) iRequestAnAdvice() error {
	url := "https://api.adviceslip.com/advice/56"

	resp, err := http.Get(url)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error response. %s\n", err)
	}
	if resp.StatusCode != 200 {
		fmt.Println("Status Code. %s\n", resp.StatusCode)
	}
	data, _ := ioutil.ReadAll(resp.Body)
	json.Unmarshal(data, &ctx.advice56)

	return nil
}

func (ctx *StepContext) iTheAdviceReturned() error {
	//var expectedAdvice SpecificAdvice
	expectedAdvice := SpecificAdvice{Slip: SlipAD{Advice: "Try to do the things that you're incapable of."}}

	if ctx.advice56.Slip != expectedAdvice.Slip {
		panic(fmt.Errorf("Advice Not equal: %v", ctx.advice56.Slip))
	}

	fmt.Println("Advice: ", expectedAdvice.Slip)
	return nil
}

//Scenario: verify an advice is not returned with a invalid advice ID
func (ctx *StepContext) iRequestAnAdviceInvalidID() error {
	url := "https://api.adviceslip.com/advice/aaa"

	resp, err := http.Get(url)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error response. %s\n", err)
	}
	if resp.StatusCode != 200 {
		fmt.Println("Status Code. %s\n", resp.StatusCode)
	}
	data, errD := ioutil.ReadAll(resp.Body)
	if errD != nil {
		fmt.Fprintf(os.Stderr, "Error unmarshalling. %s\n", err)
	}
	json.Unmarshal(data, &ctx.adviceMessage)
	return nil
}

func (ctx *StepContext) iTheAdviceNotReturned() error {
	//var expectedAdvice SpecificAdvice
	expectedAdviceMessage := AdviceMessage{Message: Message{Type: "error", Text: "SQLSTATE[42S22]: Column not found: 1054 Unknown column 'aaa' in 'where clause'"}}
	fmt.Println("ctx.adviceMessage.Message.Type")
	fmt.Println(ctx.adviceMessage.Message.Type)
	fmt.Println(expectedAdviceMessage.Message.Type)
	if ctx.adviceMessage.Message.Type != expectedAdviceMessage.Message.Type {
		panic(fmt.Errorf("Invaid Advice ID: %v", ctx.adviceMessage.Message.Text))
	}

	fmt.Println("Advice Message: ", expectedAdviceMessage.Message.Text)
	return nil
}

//Scenario: verify an advice is not returned with an advice ID that does not exist
func (ctx *StepContext) iRequestAnAdviceNonExistentID() error {
	url := "https://api.adviceslip.com/advice/999"

	resp, err := http.Get(url)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error response. %s\n", err)
	}
	if resp.StatusCode != 200 {
		fmt.Println("Status Code. %s\n", resp.StatusCode)
	}
	data, _ := ioutil.ReadAll(resp.Body)

	json.Unmarshal(data, &ctx.adviceMessage)

	return nil
}

func (ctx *StepContext) iTheNonExistentAdviceNotReturned() error {
	expectedAdviceMessage := AdviceMessage{Message: Message{Type: "error", Text: "Advice slip not found."}}

	if ctx.adviceMessage.Message.Type != expectedAdviceMessage.Message.Type {
		panic(fmt.Errorf("Advice Not equal: %v", ctx.advice56.Slip))
	}

	fmt.Println("Advice Message: ", expectedAdviceMessage.Message.Text)
	return nil
}

//Scenario: search an advice
func (ctx *StepContext) iSearchAnAdvice() error {
	url := "https://api.adviceslip.com/advice/search/headphones"

	resp, err := http.Get(url)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error response. %s\n", err)
	}
	if resp.StatusCode != 200 {
		fmt.Println("Status Code. %s\n", resp.StatusCode)
	}

	data, _ := ioutil.ReadAll(resp.Body)
	//fmt.Println(string(data))
	json.Unmarshal(data, &ctx.searchResult)

	return nil
}

func (ctx *StepContext) iTheSearchedAdviceReturned() error {
	slipAdvice := Slip{Advice: "If you think your headphones are dying, check the socket for fluff with a straightened paperclip.", SlipID: "121"}

	expectedSearchedAdvice := SearchResult{TotalResults: "1", Query: "headphone", Slips: []Slip{slipAdvice}}
	if ctx.searchResult.Slips == nil {
		panic(fmt.Errorf("Advice not found. Query: %v", ctx.searchResult.Query))
	}

	fmt.Println("Advice Message: ", expectedSearchedAdvice.Slips)
	return nil
}

//Scenario: search a non existent advice
func (ctx *StepContext) iSearchANonExistentAdvice() error {
	url := "https://api.adviceslip.com/advice/search/999"

	resp, err := http.Get(url)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error response. %s\n", err)
	}
	if resp.StatusCode != 200 {
		fmt.Println("Status Code. %s\n", resp.StatusCode)
	}

	data, _ := ioutil.ReadAll(resp.Body)
	json.Unmarshal(data, &ctx.adviceMessage)

	return nil
}

func (ctx *StepContext) iTheSearchedNonExistentAdviceNotReturned() error {
	expectedAdviceMessage := AdviceMessage{Message: Message{Type: "notice", Text: "No advice slips found matching that search term."}}
	if ctx.adviceMessage.Message.Type != expectedAdviceMessage.Message.Type {
		panic(fmt.Errorf("Advice Not equal: %v", ctx.advice56.Slip))
	}

	fmt.Println("Advice Message: ", expectedAdviceMessage.Message)
	return nil
}

func FeatureContext(s *godog.Suite) {
	ctx := &StepContext{}
	//ctx.initialize()
	//Scenario: verify a random advice is returned
	s.Step(`^the advice service is running$`, ctx.iAdviceServiceRunning)
	s.Step(`^I request a random advice$`, ctx.iRequestRandomAdvice)
	s.Step(`^the random advice is returned$`, ctx.iRandomAdviceReturned)
	//Scenario: verify an advice is returned
	s.Step(`^I request an advice$`, ctx.iRequestAnAdvice)
	s.Step(`^the advice is returned$`, ctx.iTheAdviceReturned)
	//Scenario: verify an advice is not returned with a invalid advice ID
	s.Step(`^I request an advice with a invalid advice ID$`, ctx.iRequestAnAdviceInvalidID)
	s.Step(`^I got an error invalid ID$`, ctx.iTheAdviceNotReturned)
	//Scenario: verify an advice is not returned with an advice ID that does not exist
	s.Step(`^I request an advice with an advice ID that does not exist$`, ctx.iRequestAnAdviceNonExistentID)
	s.Step(`^I got an error non existent ID$`, ctx.iTheNonExistentAdviceNotReturned)
	//Scenario: search an advice
	s.Step(`^I search an advice$`, ctx.iSearchAnAdvice)
	s.Step(`^the searched advice is returned$`, ctx.iTheSearchedAdviceReturned)
	//Scenario: search a non existen advice
	s.Step(`^I search a non existent advice$`, ctx.iSearchANonExistentAdvice)
	s.Step(`^the searched advice is not found$`, ctx.iTheSearchedNonExistentAdviceNotReturned)
}
